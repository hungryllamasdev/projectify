generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  emailVerified DateTime?

  projectAssignments ProjectAssignment[]
  ActivityLog        ActivityLog[]

  // Authjs Relations
  accounts    Account[]
  Project     Project[]
  InviteToken InviteToken[]
  Task        Task[]

  @@map("users")
}

// Authjs Model
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerID String
  owner   User   @relation(fields: [ownerID], references: [id], onDelete: Cascade)

  shareTokens InviteToken[]

  members     ProjectAssignment[]
  tasks       Task[]
  ActivityLog ActivityLog[]
  Document    Document?
  budget         Decimal?
  financialItems FinancialItem[]

  @@map("projects")
}

model ProjectAssignment {
  id        String      @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("project_assignments")
}

enum ProjectRole {
  OWNER
  MEMBER
  VIEWER
}

model Task {
  id          String       @id @default(cuid())
  projectID   String
  title       String
  type        TaskType
  description String?
  assignee    User         @relation(fields: [assigneeId], references: [id])
  assigneeId  String
  status      TaskStatus   @default(TODO)
  isCompleted Boolean      @default(false)
  isPinned    Boolean      @default(false)
  priority    TaskPriority
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  project Project @relation(fields: [projectID], references: [id])

  @@map("tasks")
}

enum TaskType {
  FEATURE
  BUG
  TASK
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

model ActivityLog {
  id        String       @id @default(cuid())
  projectId String
  userId    String?
  type      ActivityType
  taskId    String?
  timestamp DateTime     @default(now())

  project Project @relation(fields: [projectId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@map("activity_logs")
}

enum ActivityType {
  CREATE_TASK
  UPDATE_TASK
  DELETE_TASK
  CHANGE_TASK_STATUS
  ASSIGN_TASK
  CREATE_PROJECT
  UPDATE_PROJECT
  ADD_MEMBER
  REMOVE_MEMBER
  OTHER
}

model InviteToken {
  id             String   @id @default(cuid())
  token          String   @unique
  projectId      String
  project        Project  @relation(fields: [projectId], references: [id])
  expirationDate DateTime
  maxUses        Int
  uses           Int      @default(0)
  accessLevel    String
  inviterId      String
  inviter        User     @relation(fields: [inviterId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("invite_tokens")
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

model FinancialItem {
  id          String           @id @default(cuid())
  projectId   String
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  type        FinancialItemType
  category    String
  description String
  amount      Decimal
  frequency   Frequency
  linkedTo    String?
  date        DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("financial_items")
}

enum FinancialItemType {
  INCOME
  EXPENSE
}

enum Frequency {
  ONE_TIME
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}